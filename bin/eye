#!/usr/bin/env ruby
$:.unshift File.expand_path(File.join(File.dirname(__FILE__), %w[.. lib]))
require 'rubygems' if RUBY_VERSION < '1.9'
require 'eye'

gem 'thor'
require 'thor'

class Cli < Thor

  desc "info [APP]", "show process statuses"
  def info(app = nil)
    res = cmd(:info, app)
    puts res if res && !res.empty?
    puts
  end

  desc "status ", "show process statuses"
  def status
    say "status is deprecated, use :info instead", :yellow
    info
  end

  desc "xinfo", "extended eye info, debug data"
  method_option :config, :type => :boolean, :aliases => "-c"
  def xinfo    
    res = cmd(:xinfo, options[:config])
    puts res if res && !res.empty?
    puts
  end

  desc "load [CONF]", "load config (and start server if needed) (-f for foregraund start)"
  method_option :foregraund, :type => :boolean, :aliases => "-f"
  method_option :logger, :type => :string, :aliases => "-l"
  def load(conf = "")
    conf = File.expand_path(conf) if !conf.empty?

    if options[:foregraund]
      # in foregraund we stop another server, and run just 1 current config version
      server_start_foregraund(conf)

    elsif server_started?
      say_load_result cmd(:load, conf)

    else
      server_start(conf)

    end
  end

  desc "quit", "stop eye monitoring"
  def quit
    res = _cmd(:quit)

    # if eye server got crazy, stop by force
    ensure_stop_previous_server if res != :corrupred_marshal

    say "stopped...", :yellow
  end
  
  [:start, :stop, :restart, :unmonitor, :monitor, :delete, :match].each do |_cmd|
    desc "#{_cmd} MASK[,...]", "#{_cmd} app,group or process"
    define_method(_cmd) do |*targets|
      send_command(_cmd, *targets)
    end
  end

  desc "trace [TARGET]", "tracing log for app,group or process"
  def trace(target = "")
    log_trace(target)
  end

  desc "version", "show current version"
  def version
    say Eye::ABOUT
  end

  desc "check CONF", "check syntax of the config file"
  method_option :host, :type => :string, :aliases => "-h"
  method_option :verbose, :type => :boolean, :aliases => "-v"
  def check(conf)
    conf = File.expand_path(conf) if conf && !conf.empty?

    Eye::System.host = options[:host] if options[:host]
    Eye::Dsl.verbose = options[:verbose]
    
    if RUBY_VERSION < '1.9'
      say_load_result cmd(:check, conf), :syntax => true
    else
      say_load_result Eye::Control.check(conf), :syntax => true
    end
  end

  desc "explain CONF", "explain config tree (for debug)"
  method_option :host, :type => :string, :aliases => "-h"
  method_option :verbose, :type => :boolean, :aliases => "-v"
  def explain(conf)
    conf = File.expand_path(conf) if conf && !conf.empty?

    Eye::System.host = options[:host] if options[:host]
    Eye::Dsl.verbose = options[:verbose]

    if RUBY_VERSION < '1.9'
      say_load_result cmd(:explain, conf), :print_config => true, :syntax => true
    else
      say_load_result Eye::Control.explain(conf), :print_config => true, :syntax => true
    end
  end

private

  def client
    @client ||= Eye::Client.new(Eye::Settings.socket_path)
  end

  def _cmd(cmd, *args)
    client.command(cmd, *args)
  rescue Errno::ECONNREFUSED, Errno::ENOENT
    :not_started
  end
  
  def cmd(cmd, *args)
    res = _cmd(cmd, *args)

    if res == :not_started
      say "eye monitoring not found, did you start it?", :red
      exit 1
    elsif res == :timeouted
      say "eye does not answer, timeouted...", :red
      exit 1
    end
    
    res
  end
  
  def server_started?
    _cmd(:ping) == :pong
  end
  
  def say_load_result(res = {}, opts = {})
    if res[:error]
      say "config error: ", :red
      say res[:message]

      res[:backtrace].to_a.each{|line| say line}

      exit 1
    else 
      if opts[:started]
        say "started and loaded!", :yellow if !res[:empty]
      elsif opts[:syntax]
        say "config ok!", :yellow if !res[:empty]
      else
        say "config loaded!", :yellow if !res[:empty]        
      end

      if opts[:print_config]
        begin
          require 'awesome_print'
          ap res[:config], :indent => 2
        rescue LoadError
          require 'pp'
          pp res[:config]
        end
      end
    end
  end

  def send_command(_cmd, *args)
    res = cmd(_cmd, *args)
    if res == :unknown_command
      say "unknown command :#{_cmd}", :red
    elsif res == :corrupred_marshal
      say "something crazy wrong, check eye logs!", :red
    elsif res == []
      say "command :#{_cmd}, targets not found!", :red
    else
      say "command :#{_cmd} sended to [#{res * ", "}]"
    end        
  end

  def log_trace(tag = '')
    log_file = cmd(:logger_dev)
    if log_file && File.exists?(log_file)
      Process.exec "tail -n 100 -f #{log_file} | grep '#{tag}'"
    else
      say "log file not found #{log_file.inspect}", :red
    end
  end
  
  def loader_path
    Gem.bin_path('eye', 'loader_eye')
  rescue Gem::GemNotFoundException, Gem::Exception
    filename = File.join(File.dirname(__FILE__), %w[loader_eye])
    File.exists?(filename) ? filename : nil
  end  
  
  def ruby_path
    require 'rbconfig'
    RbConfig::CONFIG['bindir'] + "/ruby"
  end

  def ensure_loader_path
    unless loader_path
      say "start monitoring needs to run under ruby with installed gem 'eye'", :red
      exit 1
    end
  end

  def server_start_foregraund(conf = nil)
    ensure_loader_path
    Eye::Settings.ensure_eye_dir

    if server_started?
      _cmd(:quit) && sleep(1) # stop previous server
    end

    args = []
    args += ['-c', conf] if conf
    args += ['-l', 'stdout']

    Process.exec(ruby_path, loader_path, *args)
  end

  def server_start(conf = nil)
    ensure_loader_path
    Eye::Settings.ensure_eye_dir

    ensure_stop_previous_server
    
    args = []
    args += ['-l', options[:logger]] if options[:logger]

    pid = Process.spawn(ruby_path, loader_path, *args, :out => '/dev/null', :err => '/dev/null', :in => '/dev/null',
                        :chdir => '/', :pgroup => true)
    Process.detach(pid)
    File.open(Eye::Settings.pid_path, 'w'){|f| f.write(pid) }

    unless wait_server
      say "server not runned in 15 seconds, something crazy wrong", :red
      exit 1
    end

    if conf && !conf.empty?
      say_load_result cmd(:load, conf), :started => true
    else
      say "started!", :yellow
    end
  end

  def ensure_stop_previous_server
    Eye::Settings.ensure_eye_dir
    pid = File.read(Eye::Settings.pid_path).to_i rescue nil
    if pid
      Process.kill(9, pid) rescue nil
    end
    File.delete(Eye::Settings.pid_path) rescue nil
    true
  end

  def wait_server
    Timeout.timeout(15) do
      while !server_started?
        sleep 0.3
      end
    end

    true
  rescue Timeout::Error
    false
  end

end

Cli.start
